// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/xxx-client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum featureEnum {
  AddRoleOnMemberJoin
  ChangeNicknameChannel
  DailyQuestionForward
  DirectWelcomeMessage
  DynamicVoiceChannelState
  GoodbyMessage
  MediaOnlyForum
  ProvinceRoleInNickname
  ProvinceRoleNicknameRemove
  SetStatus
  WelcomeBannerForward
  Trivia
  Fishing
}

model activeFeature {
  name     featureEnum @id
  createAt DateTime    @default(now())
  updateAt DateTime    @default(now())
}

model defaultRole {
  roleId   String   @id
  createAt DateTime @default(now())
  updateAt DateTime @default(now())
}

model config {
  id                     Int      @id @default(1)
  changeNicknameChannel  String?
  triviaChannel          String?
  triviaEnglishChannel   String?
  triviaIndonesiaChannel String?
  fishingChannel         String?
  createAt               DateTime @default(now())
  updateAt               DateTime @default(now())
}

model trivia {
  id               Int                @id @default(autoincrement())
  category         String?
  question         String
  questionIndo     String?
  correctAnswer    String
  optionOne        String
  optionTwo        String?
  optionThree      String?
  triviaUserAnswer triviaUserAnswer[]
  createAt         DateTime           @default(now())
  updateAt         DateTime           @default(now())
}

model triviaUserAnswer {
  id       Int      @id @default(autoincrement())
  trivia   trivia?  @relation(fields: [triviaId], references: [id])
  triviaId Int
  userId   String
  correct  Boolean
  answer   String
  createAt DateTime @default(now())
  updateAt DateTime @default(now())
}

enum rarity {
  Murahan
  Biasa
  Bagus
  Mahal
  Langka
}

model fish {
  id       Int      @id @default(autoincrement())
  name     String
  image    String
  rarity   rarity
  price    Int
  time     Int[]
  months   Int[]
  bucket   bucket[]
  createAt DateTime @default(now())
  updateAt DateTime @default(now())
}

model bucket {
  id          Int      @id @default(autoincrement())
  fingerprint String   @unique
  userId      String
  quantity    Int
  fish        fish     @relation(fields: [fishId], references: [id])
  fishId      Int
  createAt    DateTime @default(now())
  updateAt    DateTime @default(now())
  rod         rod      @relation(fields: [rodId], references: [id])
  rodId       Int      @default(1)
}

model wallet {
  id       Int      @id @default(autoincrement())
  userId   String   @unique
  amount   Int      @default(0)
  all      Int      @default(0)
  createAt DateTime @default(now())
  updateAt DateTime @default(now())
}

model work {
  id       Int      @id @default(autoincrement())
  userId   String   @unique
  createAt DateTime @default(now())
  updateAt DateTime @default(now())
}

model pick {
  id       Int      @id @default(autoincrement())
  userId   String   @unique
  createAt DateTime @default(now())
  updateAt DateTime @default(now())
}

enum possibility {
  Ikan
  Gagal
}

model rod {
  id                      Int           @id @default(autoincrement())
  name                    String
  image                   String
  price                   Int
  defaultEnergy           Int           @default(5)
  possibilityPercentAdded Int
  risk0                   possibility[]
  risk1000                possibility[]
  risk5000                possibility[]
  risk10000               possibility[]
  risk70000               possibility[]
  risk150000              possibility[]
  risk200000              possibility[]
  createAt                DateTime      @default(now())
  updateAt                DateTime      @default(now())
  rodState                rodState[]
  bucket                  bucket[]
}

model rodState {
  id       Int       @id @default(autoincrement())
  userId   String    @unique
  lastFish DateTime?
  energy   Int
  createAt DateTime  @default(now())
  updateAt DateTime  @default(now())
  rod      rod?      @relation(fields: [rodId], references: [id])
  rodId    Int?
}

model accident {
  id          Int      @id @default(autoincrement())
  description String
  createAt    DateTime @default(now())
  updateAt    DateTime @default(now())
}
